name: Sandbox Pipeline

on:
  push:
    branches-ignore:
      - main
      - master
      - development
      - staging
  pull_request:
    branches-ignore:
      - main
      - master
      - development
      - staging

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies
      run: npm install --legacy-peer-deps

    - name: Log in to Expo
      run: npx expo login --username ${{ secrets.EXPO_USERNAME }} --password ${{ secrets.EXPO_PASSWORD }}

    - name: Build Expo iOS project
      run: eas build -p ios
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }} 
        EXPO_ORG: 'mun-e'

    - name: Build Expo Android project
      run:  eas build -p android
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        EXPO_ORG: 'mun-e'

    # - name: Run Tests
    #   run: npm test

    # - name: Lint Code
    #   run: npm run lint 

    - name: Cache node_modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Upload iOS build artifact
      uses: actions/upload-artifact@v3
      with:
        name: ios-build
        path: ./ios-build
    
    - name: Upload Android build artifact
      uses: actions/upload-artifact@v3
      with:
        name: android-build
        path: ./android-build

    - name: Deploy to Expo
      run: npx expo publish --owner mun-e
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

    - name: Generate Expo QR code link
      run: npx expo url:qr --owner mun-e
      env:
        EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

  # notify:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #   - name: Send Slack notification
  #     uses: rtCamp/action-slack-notify@v2
  #     env:
  #       SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  #     with:
  #       message: 'The build for branch ${{ github.ref }} has completed. Check it out on Expo Go!'
  #       status: ${{ job.status }}

  #   - name: Send email notification
  #     uses: dawidd6/action-send-mail@v3
  #     with:
  #       server_address: smtp.example.com  # Replace with your SMTP server
  #       server_port: 587
  #       username: ${{ secrets.EMAIL_USERNAME }}
  #       password: ${{ secrets.EMAIL_PASSWORD }}
  #       subject: 'CI/CD Build Status: ${{ github.ref }}'
  #       body: 'The build for branch ${{ github.ref }} has been completed. You can access it via Expo Go using this QR code: [Link to QR Code]'
  #       to: dominique@mun-e.com  
  #       from: 'ci-pipeline@github.com'

  # linear_webhook:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Check Linear Issue Status
  #       id: check_linear_issue
  #       run: |
  #         # Set up Linear API token
  #         TOKEN="${{ secrets.LINEAR_API_TOKEN }}"
  #         ISSUE_ID="${{ github.event.issue.number }}" # Replace with your method to get the Linear issue ID
  #         STATUS=""

  #         # Check the current status of the Linear issue
  #         response=$(curl -s -H "Authorization: Bearer $TOKEN" "https://api.linear.app/v1/issues/$ISSUE_ID")
  #         current_status=$(echo $response | jq -r '.data.state')

  #         # Check if the issue is in "todo" state
  #         if [ "$current_status" == "todo" ]; then
  #           STATUS="inProgress"
  #         fi

  #         # Output status to be used in the next step
  #         echo "status=$STATUS" >> $GITHUB_ENV

  #     - name: Update Linear Issue Status
  #       if: env.status == 'inProgress'
  #       run: |
  #         TOKEN="${{ secrets.LINEAR_API_TOKEN }}"
  #         ISSUE_ID="${{ github.event.issue.number }}" # Replace with your method to get the Linear issue ID
          
  #         # Move the issue to "in progress"
  #         curl -X PATCH "https://api.linear.app/v1/issues/$ISSUE_ID" \
  #           -H "Authorization: Bearer $TOKEN" \
  #           -H "Content-Type: application/json" \
  #           -d '{"state": "inProgress"}'

  #     - name: Handle GitHub PR Merged
  #       if: github.event.action == 'merged'
  #       run: |
  #         TOKEN="${{ secrets.LINEAR_API_TOKEN }}"
  #         ISSUE_ID="${{ github.event.issue.number }}" # Replace with your method to get the Linear issue ID

  #         # Move the issue to "done"
  #         curl -X PATCH "https://api.linear.app/v1/issues/$ISSUE_ID" \
  #           -H "Authorization: Bearer $TOKEN" \
  #           -H "Content-Type: application/json" \
  #           -d '{"state": "done"}'

  #     - name: Handle GitHub PR Label
  #       if: contains(github.event.pull_request.labels.*.name, 'ready for review')
  #       run: |
  #         TOKEN="${{ secrets.LINEAR_API_TOKEN }}"
  #         ISSUE_ID="${{ github.event.issue.number }}" # Replace with your method to get the Linear issue ID

  #         # Move the issue to "ready for review"
  #         curl -X PATCH "https://api.linear.app/v1/issues/$ISSUE_ID" \
  #           -H "Authorization: Bearer $TOKEN" \
  #           -H "Content-Type: application/json" \
  #           -d '{"state": "readyForReview"}'

  #     - name: Handle Backlog Warning
  #       if: github.event.action == 'opened' && env.current_status == 'backlog'
  #       run: |
  #         # Add warning to GitHub PR description
  #         warning_message="⚠️ This issue is in the backlog. Please confirm if this issue should be worked on."
  #         pr_number=${{ github.event.pull_request.number }}
  #         curl -X PATCH "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number" \
  #           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #           -H "Content-Type: application/json" \
  #           -d "{\"body\":\"$warning_message\"}"

