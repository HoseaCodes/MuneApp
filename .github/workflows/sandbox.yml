name: Sandbox Pipeline

on:
  push:
    branches-ignore:
      - main
      - master
      - development
      - staging
  pull_request:
    branches-ignore:
      - main
      - master
      - development
      - staging
  
  workflow_dispatch:   

permissions:
  pull-requests: write

jobs:
  linter:
    runs-on: ubuntu-latest

    steps:
      - name: üèó Setup repo
        run: |
          echo "Running linter"

  preview:
    runs-on: ubuntu-latest
    needs: linter
    if: ${{ github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: üèó Setup repo
        uses: actions/checkout@v3

      - name: üèó Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: yarn
      
      - name: üõ†Ô∏è Patch system watchers for 'ENOSPC' error
        run: |
          sudo sysctl -w fs.inotify.max_user_instances=524288
          sudo sysctl -w fs.inotify.max_user_watches=524288
          sudo sysctl -w fs.inotify.max_queued_events=524288
          sudo sysctl -p

      - name: üèó Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: üì¶ Install dependencies
        run: yarn install

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: üöÄ Create preview
        uses: expo/expo-github-action/preview@v8
        with:
          command: eas update --auto --branch ${{ github.event.pull_request.head.ref }}
        continue-on-error: true

  generate-qr-code:
    runs-on: ubuntu-latest
    needs: linter
    if: ${{ github.event_name == 'workflow_dispatch' }}

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Node.js environment
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x

    # Step 3: Install dependencies
    - name: Install Dependencies
      run: npm install --legacy-peer-deps 

    - name: Install EAS CLI
      run: npm install -g eas-cli

    - name: Log in to Expo
      run: npx expo login --username ${{ secrets.EXPO_USERNAME }} --password ${{ secrets.EXPO_PASSWORD }}

    # Step 4: Deploy to the appropriate branch using EAS CLI
    - name: Run EAS Update
      run: |
        eas update --auto --branch "staging"

    # Step 5: Set channel to the branch (this assumes channel name matches branch)
    - name: Set EAS Channel
      run: |
        CHANNEL_NAME="staging"
        eas channel:edit $CHANNEL_NAME --branch "staging"

    # Step 6: Generate Manifest URL
    - name: Generate Manifest URL
      id: generate-manifest-url
      run: |
        EAS_PROJECT_ID="27339099-a190-412f-b17c-40dfb90ea4c9"
        MANIFEST_URL="https://u.expo.dev/${EAS_PROJECT_ID}?channel-name=${{ github.sha }}"
        echo "::set-output name=manifest_url::$MANIFEST_URL"

    # Step 7: Generate Deep Link URL
    - name: Generate Deep Link URL
      id: generate-deep-link
      run: |
        EXPO_SLUG="MuneApp"
        MANIFEST_URL="${{ steps.generate-manifest-url.outputs.manifest_url }}"
        DEEP_LINK="exp+${EXPO_SLUG}://expo-development-client/?url=${MANIFEST_URL}"
        echo "::set-output name=deep_link::$DEEP_LINK"

    # Step 8: Generate QR Code from Deep Link
    - name: Generate QR Code
      id: generate-qr-code
      run: |
        DEEP_LINK="${{ steps.generate-deep-link.outputs.deep_link }}"
        QR_CODE_URL="http://api.qrserver.com/v1/create-qr-code/?color=000000&bgcolor=FFFFFF&data=${DEEP_LINK}&qzone=1&margin=0&size=500x500&ecc=L"
        echo "::set-output name=qr_code_url::$QR_CODE_URL"

    # Step 9: Upload the QR code as an artifact (Optional)
    - name: Upload QR Code Artifact
      uses: actions/upload-artifact@v3
      with:
        name: qr-code
        path: ${{ steps.generate-qr-code.outputs.qr_code_url }}
    
    - name: Get Pull Request Number
      uses: 8BitJonny/gh-get-current-pr@3.0.0
      id: PR

    # Step 10: Post QR Code URL as a comment on the pull request (Optional)
    - name: Post QR Code as PR comment
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        number: ${{ steps.PR.outputs.number || github.event.number }}
        token: ${{ secrets.GITHUB_TOKEN }}
        header: "EAS Update QR Code"
        message: |
          Manifest URL: ${{ steps.generate-manifest-url.outputs.manifest_url }}
          Deep Link: ${{ steps.generate-deep-link.outputs.deep_link }}
          ![QR Code](${{ steps.generate-qr-code.outputs.qr_code_url }})
    # - name: Run Tests
    #   run: npm test

    # - name: Lint Code
    #   run: npm run lint 

  # notify:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #   - name: Send Slack notification
  #     uses: rtCamp/action-slack-notify@v2
  #     env:
  #       SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  #     with:
  #       message: 'The build for branch ${{ github.ref }} has completed. Check it out on Expo Go!'
  #       status: ${{ job.status }}

  #   - name: Send email notification
  #     uses: dawidd6/action-send-mail@v3
  #     with:
  #       server_address: smtp.example.com  # Replace with your SMTP server
  #       server_port: 587
  #       username: ${{ secrets.EMAIL_USERNAME }}
  #       password: ${{ secrets.EMAIL_PASSWORD }}
  #       subject: 'CI/CD Build Status: ${{ github.ref }}'
  #       body: 'The build for branch ${{ github.ref }} has been completed. You can access it via Expo Go using this QR code: [Link to QR Code]'
  #       to: dominique@mun-e.com  
  #       from: 'ci-pipeline@github.com'

  # linear_webhook:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Check Linear Issue Status
  #       id: check_linear_issue
  #       run: |
  #         # Set up Linear API token
  #         TOKEN="${{ secrets.LINEAR_API_TOKEN }}"
  #         ISSUE_ID="${{ github.event.issue.number }}" # Replace with your method to get the Linear issue ID
  #         STATUS=""

  #         # Check the current status of the Linear issue
  #         response=$(curl -s -H "Authorization: Bearer $TOKEN" "https://api.linear.app/v1/issues/$ISSUE_ID")
  #         current_status=$(echo $response | jq -r '.data.state')

  #         # Check if the issue is in "todo" state
  #         if [ "$current_status" == "todo" ]; then
  #           STATUS="inProgress"
  #         fi

  #         # Output status to be used in the next step
  #         echo "status=$STATUS" >> $GITHUB_ENV

  #     - name: Update Linear Issue Status
  #       if: env.status == 'inProgress'
  #       run: |
  #         TOKEN="${{ secrets.LINEAR_API_TOKEN }}"
  #         ISSUE_ID="${{ github.event.issue.number }}" # Replace with your method to get the Linear issue ID
          
  #         # Move the issue to "in progress"
  #         curl -X PATCH "https://api.linear.app/v1/issues/$ISSUE_ID" \
  #           -H "Authorization: Bearer $TOKEN" \
  #           -H "Content-Type: application/json" \
  #           -d '{"state": "inProgress"}'

  #     - name: Handle GitHub PR Merged
  #       if: github.event.action == 'merged'
  #       run: |
  #         TOKEN="${{ secrets.LINEAR_API_TOKEN }}"
  #         ISSUE_ID="${{ github.event.issue.number }}" # Replace with your method to get the Linear issue ID

  #         # Move the issue to "done"
  #         curl -X PATCH "https://api.linear.app/v1/issues/$ISSUE_ID" \
  #           -H "Authorization: Bearer $TOKEN" \
  #           -H "Content-Type: application/json" \
  #           -d '{"state": "done"}'

  #     - name: Handle GitHub PR Label
  #       if: contains(github.event.pull_request.labels.*.name, 'ready for review')
  #       run: |
  #         TOKEN="${{ secrets.LINEAR_API_TOKEN }}"
  #         ISSUE_ID="${{ github.event.issue.number }}" # Replace with your method to get the Linear issue ID

  #         # Move the issue to "ready for review"
  #         curl -X PATCH "https://api.linear.app/v1/issues/$ISSUE_ID" \
  #           -H "Authorization: Bearer $TOKEN" \
  #           -H "Content-Type: application/json" \
  #           -d '{"state": "readyForReview"}'

  #     - name: Handle Backlog Warning
  #       if: github.event.action == 'opened' && env.current_status == 'backlog'
  #       run: |
  #         # Add warning to GitHub PR description
  #         warning_message="‚ö†Ô∏è This issue is in the backlog. Please confirm if this issue should be worked on."
  #         pr_number=${{ github.event.pull_request.number }}
  #         curl -X PATCH "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number" \
  #           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #           -H "Content-Type: application/json" \
  #           -d "{\"body\":\"$warning_message\"}"

