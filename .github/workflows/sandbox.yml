name: Sandbox Pipeline

on:
  push:
    branches-ignore:
      - main
      - master
      - development
      - staging
  pull_request:
    branches-ignore:
      - main
      - master
      - development
      - staging
  
  workflow_dispatch:   

permissions:
  pull-requests: write

jobs:
  linter:
    runs-on: ubuntu-latest

    steps:
      - name: 🏗 Setup repo
        run: |
          echo "Running linter"
  
  unittests:
    needs: linter
    runs-on: ubuntu-latest

    steps:
      - name: 🏗 Setup repo
        run: |
          echo "Running unit tests"

  generate-preview-link:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.x

      - name: Install Dependencies
        run: npm install --legacy-peer-deps 

      - name: Log in to Expo
        run: npx expo login --username ${{ secrets.EXPO_USERNAME }} --password ${{ secrets.EXPO_PASSWORD }}

      - name: Capture timestamp
        id: timestamp
        run: echo "::set-output name=created_at::$(date -u +'%Y-%m-%dT%H:%M:%S.%3NZ')"

      # Step 6: Capture the PR title or commit message as the message for the URL
      - name: Get PR title or commit message
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            MESSAGE="${{ github.event.pull_request.title }}"
          else
            MESSAGE="${{ github.event.head_commit.message }}"
          fi
          ENCODED_MESSAGE=$(echo "$MESSAGE" | jq -sRr @uri)
          echo "::set-output name=message::$ENCODED_MESSAGE"

      - name: Get Pull Request Number
        uses: 8BitJonny/gh-get-current-pr@3.0.0
        id: PR
      
      - name: Get updates and extract group ID
        id: extract_group_id
        run: |
          # Fetch the JSON output from the eas command
          json_output=$(npx eas update:list --branch ${{ steps.PR.outputs.number || github.event.number }} --json --non-interactive)
          
          # Extract the group ID using jq
          group_id=$(echo "$json_output" | jq -r '.currentPage[0].group')
          
          # Set the extracted group ID as an output variable
          echo "group_id=${group_id}" >> $GITHUB_ENV
        continue-on-error: true

      # Step 7: Set variables for the preview link
      - name: Generate preview link
        id: generate-preview-link
        run: |
          PROJECT_ID="27339099-a190-412f-b17c-40dfb90ea4c9"
          SLUG="exp"
          UPDATE_RUNTIME_VERSION="1.0.0"
          GROUP_ID="${{ env.group_id }}"
          # GROUP_ID="0bff5c0f-1211-4c82-8737-84210f351138"

          # Use the values generated from the previous steps
          MESSAGE="${{ steps.get-pr-title.outputs.message }}"
          CREATED_AT="${{ steps.timestamp.outputs.created_at }}"

          PREVIEW_LINK="https://expo.dev/preview/update?message=${MESSAGE}&updateRuntimeVersion=${UPDATE_RUNTIME_VERSION}&createdAt=${CREATED_AT}&slug=${SLUG}&projectId=${PROJECT_ID}&group=${GROUP_ID}"
          
          echo "::set-output name=preview_link::$PREVIEW_LINK"
        
      # Step 8: Post the preview link in the PR comment (optional)
      - name: Post Preview Link to PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          number: ${{ steps.PR.outputs.number || github.event.number }}
          header: "Expo Preview Link"
          message: |
            Here's the preview link: ${{ steps.generate-preview-link.outputs.preview_link }}


  preview:
    runs-on: ubuntu-latest
    needs: linter
    if: ${{ github.event_name == 'workflow_dispatch' }}
    
    steps:
      - name: 🏗 Setup repo
        uses: actions/checkout@v3

      - name: 🏗 Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: yarn
      
      - name: 🛠️ Patch system watchers for 'ENOSPC' error
        run: |
          sudo sysctl -w fs.inotify.max_user_instances=524288
          sudo sysctl -w fs.inotify.max_user_watches=524288
          sudo sysctl -w fs.inotify.max_queued_events=524288
          sudo sysctl -p

      - name: 🏗 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: 📦 Install dependencies
        run: yarn install

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: 🚀 Create preview
        uses: expo/expo-github-action/preview@v8
        with:
          command: eas update --auto --branch ${{ github.event.pull_request.head.ref }}
        continue-on-error: true

  generate-qr-code:
    runs-on: ubuntu-latest
    needs: unittests
    # if: ${{ github.event_name == 'workflow_dispatch' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x

    - name: Install Dependencies
      run: npm install --legacy-peer-deps 

    - name: Install EAS CLI
      run: npm install -g eas-cli

    - name: Log in to Expo
      run: npx expo login --username ${{ secrets.EXPO_USERNAME }} --password ${{ secrets.EXPO_PASSWORD }}
    
    - name: Get Pull Request Number
      uses: 8BitJonny/gh-get-current-pr@3.0.0
      id: PR

    # Set channel to the branch (this assumes channel name matches branch)
    - name: Set EAS Channel
      run: |
        CHANNEL_NAME="feature/${{ steps.PR.outputs.number || github.event.number }}"
        
        # Check if the channel exists
        if eas channel:list | grep -q "$CHANNEL_NAME"; then
          echo "Channel '$CHANNEL_NAME' already exists."
        else
          echo "Channel '$CHANNEL_NAME' does not exist. Creating it..."
          eas channel:create "feature/${{ steps.PR.outputs.number || github.event.number }}"
        fi

    - name: Run EAS Update
      run: |
        eas update --auto --branch "feature/${{ steps.PR.outputs.number || github.event.number }}"

    - name: Capture timestamp
      id: timestamp
      run: echo "::set-output name=created_at::$(date -u +'%Y-%m-%dT%H:%M:%S.%3NZ')"

    - name: Get PR title or commit message
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          MESSAGE="${{ github.event.pull_request.title }}"
        else
          MESSAGE="${{ github.event.head_commit.message }}"
        fi
        ENCODED_MESSAGE=$(echo "$MESSAGE" | jq -sRr @uri)
        echo "::set-output name=message::$ENCODED_MESSAGE"
    
    - name: Get updates and extract group ID
      id: extract_group_id
      run: |
        # Fetch the JSON output from the eas command
        json_output=$(npx eas update:list --branch "feature/${{ steps.PR.outputs.number || github.event.number }}" --json --non-interactive)
        
        # Extract the group ID using jq
        group_id=$(echo "$json_output" | jq -r '.currentPage[0].group')
        
        # Set the extracted group ID as an output variable
        echo "group_id=${group_id}" >> $GITHUB_ENV
      continue-on-error: true

    - name: Generate preview link
      id: generate-preview-link
      run: |
        PROJECT_ID="27339099-a190-412f-b17c-40dfb90ea4c9"
        SLUG="exp"
        UPDATE_RUNTIME_VERSION="1.0.0"
        GROUP_ID="${{ env.group_id }}"
        # GROUP_ID="0bff5c0f-1211-4c82-8737-84210f351138"

        # Use the values generated from the previous steps
        MESSAGE="${{ steps.get-pr-title.outputs.message }}"
        CREATED_AT="${{ steps.timestamp.outputs.created_at }}"

        PREVIEW_LINK="https://expo.dev/preview/update?message=${MESSAGE}&updateRuntimeVersion=${UPDATE_RUNTIME_VERSION}&createdAt=${CREATED_AT}&slug=${SLUG}&projectId=${PROJECT_ID}&group=${GROUP_ID}"
        
        echo "::set-output name=preview_link::$PREVIEW_LINK"

    # Step 6: Generate Manifest URL
    - name: Generate Manifest URL
      id: generate-manifest-url
      run: |
        EAS_PROJECT_ID="27339099-a190-412f-b17c-40dfb90ea4c9"
        MANIFEST_URL="https://u.expo.dev/${EAS_PROJECT_ID}?channel-name=${CHANNEL_NAME}"
        echo "::set-output name=manifest_url::$MANIFEST_URL"

    # Step 7: Generate Deep Link URL
    - name: Generate Deep Link URL
      id: generate-deep-link
      run: |
        EXPO_SLUG="MuneApp"
        MANIFEST_URL="${{ steps.generate-manifest-url.outputs.manifest_url }}"
        PREVIEW_LINK="${{ steps.generate-preview-link.outputs.preview_link }}"  
        DEEP_LINK=$PREVIEW_LINK
        echo "::set-output name=deep_link::$DEEP_LINK"

    # Step 8: Generate QR Code from Deep Link
    - name: Generate QR Code
      id: generate-qr-code
      run: |
        DEEP_LINK="${{ steps.generate-deep-link.outputs.deep_link }}"
        QR_CODE_URL="http://api.qrserver.com/v1/create-qr-code/?color=000000&bgcolor=FFFFFF&data=${DEEP_LINK}&qzone=1&margin=0&size=500x500&ecc=L"
        echo "::set-output name=qr_code_url::$QR_CODE_URL"

    # Step 9: Upload the QR code as an artifact (Optional)
    - name: Upload QR Code Artifact
      uses: actions/upload-artifact@v3
      with:
        name: qr-code
        path: ${{ steps.generate-qr-code.outputs.qr_code_url }}

    - name: Get current date
      id: get-current-date
      run: |
        # Get the current date in UTC format
        CURRENT_DATE=$(date -u +"%Y-%m-%d %H:%M:%S")
        echo "::set-output name=current_date::$CURRENT_DATE"

    # Post QR Code URL as a comment on the pull request (Optional)
    - name: Post QR Code as PR comment
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        number: ${{ steps.PR.outputs.number || github.event.number }}
        token: ${{ secrets.GITHUB_TOKEN }}
        header: "EAS Update QR Code"
        message: |
          **The latest updates on your projects**. Learn more about [Expo ↗︎](https://expo.dev/)

          | Name | Status | Preview | Comments | Updated (UTC) |
          | :--- | :----- | :------ | :------- | :------ |
          | **Manifest URL** | 🔗 [View Manifest](${{ steps.generate-manifest-url.outputs.manifest_url }}) | ✅ Ready [Inspect]()  | 💬 [**Add feedback**]() | ${{ steps.get-current-date.outputs.current_date }} |
          | **Deep Link** | 🔗 [Open Deep Link](${{ steps.generate-deep-link.outputs.deep_link }}) | ![QR Code](${{ steps.generate-qr-code.outputs.qr_code_url }}) | 💬 [**Add feedback**]() | ${{ steps.get-current-date.outputs.current_date }} |

        # message: |
        #   Manifest URL: ${{ steps.generate-manifest-url.outputs.manifest_url }}
        #   Deep Link: ${{ steps.generate-deep-link.outputs.deep_link }}
        #   ![QR Code](${{ steps.generate-qr-code.outputs.qr_code_url }})
    # - name: Run Tests
    #   run: npm test

    # - name: Lint Code
    #   run: npm run lint 

  # notify:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #   - name: Send Slack notification
  #     uses: rtCamp/action-slack-notify@v2
  #     env:
  #       SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  #     with:
  #       message: 'The build for branch ${{ github.ref }} has completed. Check it out on Expo Go!'
  #       status: ${{ job.status }}

  #   - name: Send email notification
  #     uses: dawidd6/action-send-mail@v3
  #     with:
  #       server_address: smtp.example.com  # Replace with your SMTP server
  #       server_port: 587
  #       username: ${{ secrets.EMAIL_USERNAME }}
  #       password: ${{ secrets.EMAIL_PASSWORD }}
  #       subject: 'CI/CD Build Status: ${{ github.ref }}'
  #       body: 'The build for branch ${{ github.ref }} has been completed. You can access it via Expo Go using this QR code: [Link to QR Code]'
  #       to: dominique@mun-e.com  
  #       from: 'ci-pipeline@github.com'

  # linear_webhook:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Check Linear Issue Status
  #       id: check_linear_issue
  #       run: |
  #         # Set up Linear API token
  #         TOKEN="${{ secrets.LINEAR_API_TOKEN }}"
  #         ISSUE_ID="${{ github.event.issue.number }}" # Replace with your method to get the Linear issue ID
  #         STATUS=""

  #         # Check the current status of the Linear issue
  #         response=$(curl -s -H "Authorization: Bearer $TOKEN" "https://api.linear.app/v1/issues/$ISSUE_ID")
  #         current_status=$(echo $response | jq -r '.data.state')

  #         # Check if the issue is in "todo" state
  #         if [ "$current_status" == "todo" ]; then
  #           STATUS="inProgress"
  #         fi

  #         # Output status to be used in the next step
  #         echo "status=$STATUS" >> $GITHUB_ENV

  #     - name: Update Linear Issue Status
  #       if: env.status == 'inProgress'
  #       run: |
  #         TOKEN="${{ secrets.LINEAR_API_TOKEN }}"
  #         ISSUE_ID="${{ github.event.issue.number }}" # Replace with your method to get the Linear issue ID
          
  #         # Move the issue to "in progress"
  #         curl -X PATCH "https://api.linear.app/v1/issues/$ISSUE_ID" \
  #           -H "Authorization: Bearer $TOKEN" \
  #           -H "Content-Type: application/json" \
  #           -d '{"state": "inProgress"}'

  #     - name: Handle GitHub PR Merged
  #       if: github.event.action == 'merged'
  #       run: |
  #         TOKEN="${{ secrets.LINEAR_API_TOKEN }}"
  #         ISSUE_ID="${{ github.event.issue.number }}" # Replace with your method to get the Linear issue ID

  #         # Move the issue to "done"
  #         curl -X PATCH "https://api.linear.app/v1/issues/$ISSUE_ID" \
  #           -H "Authorization: Bearer $TOKEN" \
  #           -H "Content-Type: application/json" \
  #           -d '{"state": "done"}'

  #     - name: Handle GitHub PR Label
  #       if: contains(github.event.pull_request.labels.*.name, 'ready for review')
  #       run: |
  #         TOKEN="${{ secrets.LINEAR_API_TOKEN }}"
  #         ISSUE_ID="${{ github.event.issue.number }}" # Replace with your method to get the Linear issue ID

  #         # Move the issue to "ready for review"
  #         curl -X PATCH "https://api.linear.app/v1/issues/$ISSUE_ID" \
  #           -H "Authorization: Bearer $TOKEN" \
  #           -H "Content-Type: application/json" \
  #           -d '{"state": "readyForReview"}'

  #     - name: Handle Backlog Warning
  #       if: github.event.action == 'opened' && env.current_status == 'backlog'
  #       run: |
  #         # Add warning to GitHub PR description
  #         warning_message="⚠️ This issue is in the backlog. Please confirm if this issue should be worked on."
  #         pr_number=${{ github.event.pull_request.number }}
  #         curl -X PATCH "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number" \
  #           -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
  #           -H "Content-Type: application/json" \
  #           -d "{\"body\":\"$warning_message\"}"

